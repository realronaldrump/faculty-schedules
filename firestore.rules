// Firestore rules - FIXED VIEWER ACCESS
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }

    // Check user's Firestore profile for admin role (supports array or map formats)
    function userHasAdminRole() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) && (
        (
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles is list &&
          'admin' in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles
        ) || (
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles is map &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true
        )
      );
    }

    // Check if user has a specific action permission in their user profile
    function userHasAction(actionKey) {
      return isSignedIn() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.actions != null) &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.actions[actionKey] == true);
    }

    // Treat someone as admin if they have a custom claim OR match your email
    function isAdmin() {
      return isSignedIn() && (
        // Custom claim on the Auth token
        request.auth.token.admin == true ||
        // Case-insensitive direct email allowlist for bootstrap
        lower(request.auth.token.email) == 'davis_deaton1@baylor.edu' ||
        // Check Firestore user profile roles (supports array or map formats)
        userHasAdminRole()
      );
    }

    // Simplified access control - more permissive for testing
    function canReadPage(pageId) {
      return isSignedIn();
    }

    // Admin-only access for sensitive operations
    function canWrite() {
      return isAdmin();
    }

    // Settings collection: everyone signed-in can read; only admin writes
    match /settings/{docId} {
      allow read: if isSignedIn();
      allow write: if canWrite();
    }

    // Users profiles: user can read/write own; admin can read/write all
    match /users/{userId} {
      allow read: if isSignedIn() && (request.auth.uid == userId || isAdmin());
      allow write: if canWrite() || (isSignedIn() && request.auth.uid == userId);
    }

    // USER ACTIVITY TRACKING
    // Allow any signed-in user to create their own activity records
    // Keep reads/updates/deletes restricted to admins
    match /userActivity/{id} {
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if canWrite();
    }

    // People collection (faculty, staff, adjunct, students): granular permissions
    match /people/{id} {
      allow read: if isSignedIn();

      // Create operations - check specific action permissions
      allow create: if isAdmin() ||
        userHasAction('directory.faculty.create') ||
        userHasAction('directory.staff.create') ||
        userHasAction('directory.adjunct.create') ||
        userHasAction('directory.student.create');

      // Update operations - check specific action permissions
      allow update: if isAdmin() ||
        userHasAction('directory.faculty.edit') ||
        userHasAction('directory.staff.edit') ||
        userHasAction('directory.adjunct.edit') ||
        userHasAction('directory.student.edit') ||
        userHasAction('crn.update') ||
        userHasAction('missing.data.update');

      // Delete operations - check specific action permissions
      allow delete: if isAdmin() ||
        userHasAction('directory.faculty.delete') ||
        userHasAction('directory.staff.delete') ||
        userHasAction('directory.adjunct.delete') ||
        userHasAction('directory.student.delete');
    }
    // Schedules collection: granular permissions
    match /schedules/{id} {
      allow read: if isSignedIn();
      allow create: if isAdmin() || userHasAction('schedule.create');
      allow update: if isAdmin() || userHasAction('schedule.edit') || userHasAction('schedule.bulk.edit');
      allow delete: if isAdmin() || userHasAction('schedule.delete');
    }

    // Programs collection: granular permissions
    match /programs/{id} {
      allow read: if isSignedIn();
      allow create: if isAdmin() || userHasAction('program.create');
      allow update: if isAdmin() || userHasAction('program.edit') || userHasAction('program.upd.assign');
      allow delete: if isAdmin() || userHasAction('program.delete');
    }

    // Departments collection: granular permissions
    match /departments/{id} {
      allow read: if isSignedIn();
      allow create: if isAdmin() || userHasAction('department.create');
      allow update: if isAdmin() || userHasAction('department.edit');
      allow delete: if isAdmin() || userHasAction('department.delete');
    }

    // Courses collection: granular permissions
    match /courses/{id} {
      allow read: if isSignedIn();
      allow create: if isAdmin() || userHasAction('course.create');
      allow update: if isAdmin() || userHasAction('course.edit');
      allow delete: if isAdmin() || userHasAction('course.delete');
    }

    // Terms collection: granular permissions
    match /terms/{id} {
      allow read: if isSignedIn();
      allow create: if isAdmin() || userHasAction('term.create');
      allow update: if isAdmin() || userHasAction('term.edit');
      allow delete: if isAdmin() || userHasAction('term.delete');
    }

    // Rooms collection: granular permissions
    match /rooms/{id} {
      allow read: if isSignedIn();
      allow create: if isAdmin() || userHasAction('room.create');
      allow update: if isAdmin() || userHasAction('room.edit');
      allow delete: if isAdmin() || userHasAction('room.delete');
    }

    // Acronyms collection: granular permissions
    match /baylorAcronyms/{id} {
      allow read: if isSignedIn();
      allow create: if isAdmin() || userHasAction('acronym.create');
      allow update: if isAdmin() || userHasAction('acronym.edit');
      allow delete: if isAdmin() || userHasAction('acronym.delete');
    }

    // Change logs
    // - Allow any signed-in user to READ recent changes (dashboard visibility)
    // - Only admins can WRITE
    match /changeLog/{id} {
      allow read: if isSignedIn();
      allow write: if canWrite();
    }
    // Legacy edit history
    // - Allow signed-in read to avoid noisy permission warnings in UI
    // - Only admins can write
    match /editHistory/{id} {
      allow read: if isSignedIn();
      allow write: if canWrite();
    }

    // Import transactions (for preview, commit summary, and rollback)
    match /importTransactions/{id} {
      // Allow admins to read history and details for rollback
      allow read: if isAdmin();
      // Only admins can create/update/delete import transactions
      allow write: if canWrite();
    }

    // Room grids: allow non-admin writes if the user has explicit action grants
    match /roomGrids/{id} {
      allow read: if isSignedIn();
      allow create: if isAdmin() || userHasAction('roomGrids.save');
      allow update, delete: if isAdmin() || userHasAction('roomGrids.delete');
    }
  }
}
